<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <description>Shiro安全配置</description>

    <!-- 項目自定义的Realm -->
    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
    <bean id="shiroDbRealm" class="com.zm.hospital.common.shiro.ShiroDbRealm"/>

    <!-- 用户授权信息Cache, 采用EhCache -->
    <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro2.xml"/>
        <!--<property name="cacheManager" ref="ehCacheManager"/>-->
    </bean>

    <!--自定义过滤器-->
    <bean id="permission" class="com.zm.hospital.common.shiro.filter.PermissionFilter"/>
    <bean id="simpleAuth" class="com.zm.hospital.common.shiro.filter.SimpleAuthFilter"/>
    <bean id="kickOut" class="com.zm.hospital.common.shiro.filter.KickOutFilter"/>

    <!-- Shiro Filter -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">

        <!-- 安全管理器 -->
        <property name="securityManager" ref="securityManager"/>

        <!-- 默认的登陆访问url -->
        <property name="loginUrl" value="/login"/>

        <!-- 登陆成功后跳转的url -->
        <!--<property name="successUrl" value="/user"/>-->
        <!-- 没有权限跳转的url -->
        <!--<property name="unauthorizedUrl" value="/unauth"/>-->

        <property name="filterChainDefinitions">
            <value>
                <!-- 不需要认证 -->
                / =anon <!--首页-->
                /commons/** = anon
                /static/** = anon
                /favicon.ico = anon
                /login = anon
                /unauth= anon

                /index=simpleAuth<!--登录后首页-->
                /resource/getmenu = simpleAuth
                /logout = simpleAuth

                <!-- 需要登录和权限认证 -->
                /** = simpleAuth,kickOut,permission
            </value>
        </property>
        <property name="filters">
            <util:map>
                <entry key="permission" value-ref="permission"/>
            </util:map>
        </property>
    </bean>


    <!-- 用户信息记住我功能的相关配置 -->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="shiro_remeberme"/>
        <property name="httpOnly" value="true"/>
        <!-- 配置存储rememberMe Cookie的domain为 一级域名
        <property name="domain" value=".itboy.net"/>
         -->
        <property name="maxAge" value="2592000"/><!-- 30天时间，记住我30天 -->
    </bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('3AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- Session Cookie-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--cookie的name，我故意取名叫xxxxbaidu -->
        <constructor-arg value="shiro_cookie"/>
        <property name="httpOnly" value="true"/>
        <!--cookie的有效时间 秒为单位-->
        <property name="maxAge" value="1800"/>
        <!-- 配置存储Session Cookie的domain为 一级域名
        <property name="domain" value=".itboy.net"/>
         -->
    </bean>

    <!-- Session 验证 -->
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <!-- 间隔多少时间检查，不配置是60分钟 -->
        <property name="interval" value="${session.validate.timespan}"/>
        <property name="sessionManager" ref="sessionManager"/>

    </bean>

    <!--session 的CRUD增删改查-->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <!--<property name="cacheManager" ref="shiroEhcacheManager"/>-->
        <property name="activeSessionsCacheName" value="shiroCache1"/>
    </bean>

    <!--custom shiro session listener -->
    <bean id="customSessionListener" class="com.zm.hospital.common.shiro.listener.CustomSessionListener"/>

    <!-- Session Manager -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 相隔多久检查一次session的有效性   -->
        <property name="sessionValidationInterval" value="1800000"/>
        <!-- session 有效时间为半小时 （毫秒单位）-->
        <property name="globalSessionTimeout" value="1800000"/>
        <!-- 间隔多少时间检查，不配置是60分钟 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>

        <property name="sessionDAO" ref="sessionDAO"/>

        <!--session 监听，可以多个。 -->
        <property name="sessionListeners">
            <list>
                <ref bean="customSessionListener"/>
            </list>
        </property>

        <!-- 会话Cookie模板 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <!-- 是否开启 检测，默认开启 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 是否删除无效的，默认也是开启 -->
        <property name="deleteInvalidSessions" value="true"/>
    </bean>


    <!--安全管理器-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--设置自定义Realm-->
        <property name="realm" ref="shiroDbRealm"/>
        <!--缓存管理-->
        <property name="cacheManager" ref="shiroEhcacheManager"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>


    <!-- 在方法中 注入  securityManager ，进行代理控制 -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- AOP式方法级权限检查  -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>

    <!-- 启用shrio授权注解拦截方式 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>